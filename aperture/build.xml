<?xml version="1.0"?>

<!--
ANT Build Script for compiling, distributing and testing
the Aperture data extraction framework.

You will need Apache ANT to execute this script, please get
your copy of ANT at http://ant.apache.org/
-->

<project name="aperture" basedir="." default="build">

	<!-- define properties and paths -->
	<target name="init">
		<!-- names -->
		<property name="project.longname" value="Aperture Crawling and Extraction Framework" />
		<property name="project.shortname" value="aperture" />
		
		<!-- versions -->
		<property name="project.version.major" value="0" />
		<property name="project.version.minor" value="1" />
		<property name="version-status" value="-dev" />
		<property name="project.version.full" value="${project.version.major}.${project.version.minor}${version-status}" />
	
		<!-- input dirs -->
		<property name="src.dir" value="${basedir}/src/java" />
		<property name="test.src.dir" value="${basedir}/src/test" />
		<property name="examples.src.dir" value="${basedir}/src/examples" />
		<property name="lib.dir" value="${basedir}/lib" />
		<property name="doc.dir" value="${basedir}/doc" />
				
		<!-- output dirs -->
		<property name="build.dir" value="${basedir}/build" />
		<property name="classes.dir" value="${build.dir}/classes" />
		<property name="test.classes.dir" value="${build.dir}/classes-test" />
		<property name="examples.classes.dir" value="${build.dir}/classes-examples" />
		<property name="dist.dir" value="${build.dir}/dist" />
		<property name="javadoc.dir" value="${dist.dir}/api" />

		<!-- created jar files -->
		<property name="project.jar" value="${project.shortname}-${project.version.full}.jar" />
		<property name="project-test.jar" value="${project.shortname}-test-${project.version.full}.jar" />
		<property name="project-examples.jar" value="${project.shortname}-examples-${project.version.full}.jar" />

		<!-- compilation flags -->		
		<property name="compile.debug" value="true" />
		<property name="compile.debuglevel" value="source,lines" />
		<property name="compile.deprecation" value="false" />
		<property name="compile.optimize" value="true" />
		<property name="java.src.version" value="1.4" />

		<!-- main compilation classpath -->
		<path id="classpath">
			<fileset dir="${lib.dir}">
				<include name="*.jar" />
			</fileset>
		</path>

		<!-- classpath to compile tests -->
		<path id="test.classpath">
			<path refid="classpath" />
			<pathelement location="${classes.dir}" />
		</path>

		<!-- classpath to compile examples -->
		<path id="examples.classpath">
			<path refid="classpath" />
			<pathelement location="${classes.dir}" />
		</path>
		
		<!-- classpath to run unit tests -->
		<path id="junit.classpath">
			<path refid="test.classpath" />
			<pathelement location="${test.classes.dir}" />
		</path>
		
		<!-- pattern to define resource files -->
		<patternset id="resources">
			<include name="**" />
			<exclude name="**/*.java" />
			<exclude name="**/CVS, **/.svn/**" />
		</patternset>
	</target>
	
	<target name="clean" depends="init" description="delete generated classes and distribution results">
		<delete dir="${build.dir}" includeemptydirs="true" />
	</target>
	
	<target name="compile" depends="init" description="compile Aperture core classes">
		<!-- compile core classes -->
		<mkdir dir="${classes.dir}" />
		<javac source="${java.src.version}" srcdir="${src.dir}" destdir="${classes.dir}" classpathref="classpath" debug="${compile.debug}" debuglevel="${compile.debuglevel}" deprecation="${compile.deprecation}" optimize="${compile.optimize}" />
		
		<!-- copy resources to classes dir -->
		<copy todir="${classes.dir}">
			<fileset dir="${src.dir}">
				<patternset refid="resources" />
			</fileset>
		</copy>
	</target>

	<target name="compile.examples" depends="init, compile" description="compile Aperture examples classes">
		<!-- compile example classes -->
		<mkdir dir="${examples.classes.dir}" />
		<javac source="${java.src.version}" srcdir="${examples.src.dir}" destdir="${examples.classes.dir}" classpathref="examples.classpath" debug="${compile.debug}" debuglevel="${compile.debuglevel}" deprecation="${compile.deprecation}" optimize="${compile.optimize}" />

		<!-- copy resource files -->
		<copy todir="${examples.classes.dir}">
			<fileset dir="${examples.src.dir}">
				<patternset refid="resources" />
			</fileset>
		</copy>
	</target>

	<target name="compile.test" depends="init, compile" description="compile Aperture unit tests">
		<!-- compule unit tests -->		
		<mkdir dir="${test.classes.dir}" />
		<javac source="${java.src.version}" srcdir="${test.src.dir}" destdir="${test.classes.dir}" classpathref="test.classpath" debug="${compile.debug}" debuglevel="${compile.debuglevel}" deprecation="${compile.deprecation}" optimize="${compile.optimize}" />
		
		<!-- copy resource files -->
		<copy todir="${test.classes.dir}">
			<fileset dir="${test.src.dir}">
				<patternset refid="resources" />
			</fileset>
		</copy>
	</target>
	
	<target name="jar" depends="compile" description="create a jar file with the Aperture core classes">
		<mkdir dir="${dist.dir}" />
		<jar destfile="${dist.dir}/${project.jar}" compress="no">
			<fileset dir="${classes.dir}" />
		</jar>
	</target>

	<target name="jar.examples" depends="compile.examples" description="create a jar file with the Aperture example classes">
		<mkdir dir="${dist.dir}" />
		<jar destfile="${dist.dir}/${project-examples.jar}" compress="no">
			<fileset dir="${examples.classes.dir}" />
		</jar>
	</target>

	<target name="jar.test" depends="compile.test" description="create a jar file with the Aperture unit test classes">
		<mkdir dir="${dist.dir}" />
		<jar destfile="${dist.dir}/${project-test.jar}" compress="no">
			<fileset dir="${test.classes.dir}" />
		</jar>
	</target>
	
	<target name="build" depends="jar, jar.examples, jar.test" description="builds all Aperture jar files" />

	<target name="javadoc" description="create the javadoc for the core classes">
		<mkdir dir="${javadoc.dir}" />
		<javadoc destdir="${javadoc.dir}" sourcepath="${src.dir}" author="true" version="true" additionalparam="-breakiterator" Use="true" classpathref="classpath" source="${java.src.version}" windowtitle="${project.longname} API release ${project.version.full}" doctitle="${project.longname} API release ${project.version.full}" packagenames="org.semanticdesktop.aperture.*">
			<link href="http://www.openrdf.org/doc/sesame2/api/" />
			<link href="http://jena.sourceforge.net/javadoc/" />
			<link href="http://java.sun.com/j2se/1.4.2/docs/api" />
		</javadoc>
	</target>
	
	<target name="dist" description="build the jar files for distribution" depends="build, test, javadoc">
		<echo message="Succesfully created an Aperture distribution." />
		<echo message="Distribution results can be found in ${dist.dir}." />
	</target>

	<!--
	  To get this to work in Eclipse, either put JUnit into your global ant dependencies or local ant dependencies. 
	  
      A - global dependencies:
          (see https://www.cyberarmy.net/forum/sneak/threads/41700.html)
          "If you'd rather use Eclipse's built-in Ant, you'll need to add junit.jar to its classpath.
          To do this, go to Window ? Preferences ? Ant ? Runtime. Then click the "Add JARs" button 
          and select junit.jar and xalan.jar from sneak/lib/. Click OK until you arrive back at the workbench view. 
      B - local dependencies (recommended):
          right-click the ant target "test" or do whatever you usually do to start ant,
          then select the "run as ...." option, so that you can configure ant before starting.
          This menu is also available on the "run external tools" button.
          There, switch to the "classpath" tab and add the /aperture/lib/junit.jar to the ant classpath. 
	-->
	<target name="test" depends="compile.test" description="test the Aperture core classes">
		<junit fork="yes" printsummary="withOutAndErr" failureproperty="unit.test.failed" showoutput="yes">
			<classpath refid="junit.classpath" />
			<test name="org.semanticdesktop.aperture.TestAll" outfile="result" />
		</junit>
		<fail if="unit.test.failed" message="Tests failed." />
	</target>

</project>