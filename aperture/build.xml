<?xml version="1.0"?>

<!DOCTYPE project [
	<!ENTITY selectors SYSTEM "selectors.xml">
]>

<!--
ANT Build Script for compiling, distributing and testing
the Aperture data extraction framework.

You will need Apache ANT to execute this script, please get
your copy of ANT at http://ant.apache.org/
-->

<project name="aperture" basedir="." default="build">

    <!-- define properties and paths -->
    <target name="init"
            description="initialize variables used in all other targets">
        <!-- names -->
        <property name="project.longname"
                  value="Aperture Crawling and Extraction Framework" />
        <property name="project.shortname" value="aperture" />
        <property name="project.bundlename"
                  value="org.semanticdesktop.aperture" />

        <!-- versions -->
        <property name="project.version.major" value="1.2" />
        <property name="project.version.minor" value="0" />
        <property name="project.version.full"
                  value="${project.version.major}.${project.version.minor}" />
        <property name="project.version.osgi"
                  value="${project.version.major}.${project.version.minor}" />

        <!-- input dirs -->
        <property name="src.dir" value="${basedir}/src" />
        <property name="src.java.dir" value="${src.dir}/java" />
        <property name="src.java.mainpackage.dir"
                  value="${src.java.dir}/org/semanticdesktop/aperture" />
        <property name="src.java.mainpackage"
                  value="org.semanticdesktop.aperture" />
        <property name="src.test.dir" value="${src.dir}/test" />
        <property name="src.examples.dir" value="${src.dir}/examples" />
        <property name="src.activators.dir" value="${src.dir}/activators" />
    	<property name="src.integration.test.dir" value="${src.dir}/integration-test" />
        <property name="manifest.dir" value="${src.dir}/manifest" />

        <property name="bin.dir" value="${basedir}/bin" />
        <property name="lib.dir" value="${basedir}/lib" />
    	<property name="lib.integration.dir" value="${basedir}/integration-test-lib" />
        <property name="doc.dir" value="${basedir}/doc" />
        <property name="patches.dir" value="${basedir}/patches" />
        <property name="doc.ontologies.dir" value="${doc.dir}/ontology" />

        <!-- build dirs -->
        <property name="build.dir" value="${basedir}/build" />
        <property name="classes.java.dir" value="${build.dir}/classes" />
        <property name="classes.test.dir" value="${build.dir}/classes-test" />
        <property name="classes.examples.dir" value="${build.dir}/classes-examples" />
        <property name="classes.activators.dir" value="${build.dir}/classes-activators" />
    	<property name="classes.integration.test.dir" value="${build.dir}/classes-integration" />

        <!-- dist dirs -->
        <property name="dist.dir" value="${build.dir}/dist" />
        <property name="dist.plainjars.dir" value="${dist.dir}/plainjars" />
        <property name="dist.bundle.dir" value="${dist.dir}/osgibundles" />
        <property name="javadoc.dir" value="${dist.dir}/api" />

        <!-- dist files -->
        <property name="project.jar"
                  value="${project.shortname}-${project.version.full}.jar" />
        <property name="project-test.jar"
                  value="${project.shortname}-test-${project.version.full}.jar" />
        <property name="project-examples.jar"
                  value="${project.shortname}-examples-${project.version.full}.jar" />

        <!-- osgi bundle properties -->
        <property name="bundle.core.jar"
                  value="${project.bundlename}_${project.version.osgi}.jar" />
        <property name="core.manifest.mf"
                  value="${manifest.dir}/core/META-INF/MANIFEST.MF" />

        <property name="bundle.impl.jar"
                  value="${project.bundlename}.impl_${project.version.osgi}.jar" />
        <property name="impl.manifest.mf"
                  value="${manifest.dir}/impl/META-INF/MANIFEST.MF" />

        <property name="bundle.example.jar"
                  value="${project.bundlename}.example_${project.version.osgi}.jar" />
        <property name="example.manifest.mf"
                  value="${manifest.dir}/example/META-INF/MANIFEST.MF" />
    	
    	<property name="bundle.safe.jar"
                  value="${project.bundlename}.safe_${project.version.osgi}.jar" />
        <property name="safe.manifest.mf"
                  value="${manifest.dir}/safe/META-INF/MANIFEST.MF" />


        <!-- release dirs and files -->
        <property name="release.dir" value="${build.dir}/release" />
        <property name="release.lib.dir" value="${release.dir}/lib" />
        <property name="release.lib.licenses.dir"
                  value="${release.lib.dir}/licenses" />
        <property name="release.bin.dir" value="${release.dir}/bin" />
        <property name="release.patches.dir" value="${release.dir}/patches" />
        <property name="release.doc.dir" value="${release.dir}/doc" />
        <property name="release.doc.api.dir" value="${release.doc.dir}/api" />
        <property name="release.src.zip" value="${release.dir}/src.zip" />

        <!-- osgi release dirs and files -->

        <property name="osgirelease.dir" value="${build.dir}/osgirelease" />
        <property name="osgirelease.lib.dir" value="${osgirelease.dir}/lib" />
        <property name="osgirelease.lib.licenses.dir"
                  value="${osgirelease.lib.dir}/licenses" />
        <property name="osgirelease.bin.dir" value="${osgirelease.dir}/bin" />
        <property name="osgirelease.patches.dir" value="${osgirelease.dir}/patches" />
        <property name="osgirelease.doc.dir" value="${osgirelease.dir}/doc" />
        <property name="osgirelease.doc.api.dir"
                  value="${osgirelease.doc.dir}/api" />
        <property name="osgirelease.src.zip"
                  value="${osgirelease.dir}/src.zip" />

        <!-- package dirs and files -->
        <property name="package.dir" value="${build.dir}/package" />
        <property name="package.prefix"
                  value="${project.shortname}-${project.version.full}" />
        <property name="package.zip"
                  value="${package.dir}/${package.prefix}.zip" />
        <property name="package.tgz"
                  value="${package.dir}/${package.prefix}.tar.gz" />

        <property name="osgipackage.zip"
                  value="${package.dir}/${package.prefix}-osgi.zip" />
        <property name="osgipackage.tgz"
                  value="${package.dir}/${package.prefix}-osgi.tar.gz" />

        <!-- compilation flags -->
        <property name="compile.debug" value="true" />
        <property name="compile.debuglevel" value="source,lines,vars" />
        <property name="compile.deprecation" value="false" />
        <property name="compile.optimize" value="true" />
        <property name="java.source.version" value="1.5" />
        <property name="java.target.version" value="1.5" />
        <property name="javac.encoding" value="UTF-8" />

        <!-- main compilation classpath -->
        <path id="classpath">
            <fileset dir="${lib.dir}">
                <include name="*.jar" />
            </fileset>
        </path>
    	
    	<path id="classpath.integration.lib">
    		<fileset dir="${lib.integration.dir}">
	            <include name="*.jar" />
	        </fileset>
    	</path>
    	
    	<path id="classpath.osgirelease.jars">
    		<fileset dir="${osgirelease.lib.dir}">
    			<include name="*.jar"/>
    		</fileset>
    	</path>

        <!-- classpath to compile tests -->
        <path id="classpath.test">
            <path refid="classpath" />
            <pathelement location="${classes.java.dir}" />
        </path>

        <!-- classpath to compile examples -->
        <path id="classpath.examples">
            <path refid="classpath" />
            <pathelement location="${classes.java.dir}" />
        </path>

        <!-- classpath to compile activators -->
        <path id="classpath.activators">
            <path refid="classpath.test" />
            <pathelement location="${classes.test.dir}" />
        </path>

        <!-- classpath to run unit tests -->
        <path id="classpath.junit">
            <path refid="classpath.test" />
            <pathelement location="${classes.test.dir}" />
        </path>
    	
    	<!-- classpath to run integraion tests -->
    	<path id="classpath.integration.test">
    		<path refid="classpath.osgirelease.jars" />
    		<path refid="classpath.integration.lib" />
    		<pathelement location="${lib.dir}/org.eclipse.osgi_3.4.0.v20080605-1900.jar" />
            <pathelement location="${classes.integration.test.dir}" />
    	</path>

        <!-- pattern to define resource files -->
        <patternset id="resources">
            <include name="**" />
            <exclude name="**/*.java" />
            <exclude name="**/CVS, **/.svn/**" />
            <exclude name="**/*.pst" />
        </patternset>
    </target>

    <!-- delete the build folder with the entire content -->
    <target name="clean"
            depends="init"
            description="delete generated classes and distribution results">
        <delete includeemptydirs="true" dir="${build.dir}" />
    </target>

    
    <!-- ******************************************************************* -->
    <!-- ************************ COMPILATION TARGETS ********************** -->
    <!-- ******************************************************************* -->
    
    <!-- necessary before the updatedatasources.xml and updatevocabularies.xml -->
    <target name="compileutils"
            depends="init"
            description="Compiles the VocabularyWriter, necessary to generate the vocabulary classes">
        <mkdir dir="${classes.java.dir}" />
        <javac source="${java.source.version}"
               target="${java.target.version}"
               srcdir="${src.dir}"
               includes="**/util/*.java,**/vocabulary/*.java"
               excludes="**/extractor/**"
               destdir="${classes.java.dir}"
               classpathref="classpath"
               debug="${compile.debug}"
               debuglevel="${compile.debuglevel}"
               deprecation="${compile.deprecation}"
               optimize="${compile.optimize}"
        	   encoding="${javac.encoding}"/>
        <!-- copy resources to classes dir -->
        <copy todir="${classes.java.dir}">
            <fileset dir="${src.java.dir}">
                <patternset refid="resources" />
            </fileset>
        </copy>
    </target>

    <target name="compile"
            depends="init"
            description="compile Aperture core classes">
        <!-- compile core classes -->
        <mkdir dir="${classes.java.dir}" />
        <javac source="${java.source.version}"
               target="${java.target.version}"
               srcdir="${src.java.dir}"
               destdir="${classes.java.dir}"
               classpathref="classpath"
               debug="${compile.debug}"
               debuglevel="${compile.debuglevel}"
               deprecation="${compile.deprecation}"
               optimize="${compile.optimize}"
               encoding="${javac.encoding}"/>
        <!-- copy resources to classes dir -->
        <copy todir="${classes.java.dir}">
            <fileset dir="${src.java.dir}">
                <patternset refid="resources" />
            </fileset>
        </copy>
    </target>

    <target name="compile.examples"
            depends="init, compile"
            description="compile Aperture examples classes">
        <!-- compile example classes -->
        <mkdir dir="${classes.examples.dir}" />
        <javac source="${java.source.version}"
               target="${java.target.version}"
               srcdir="${src.examples.dir}"
               destdir="${classes.examples.dir}"
               classpathref="classpath.examples"
               debug="${compile.debug}"
               debuglevel="${compile.debuglevel}"
               deprecation="${compile.deprecation}"
               optimize="${compile.optimize}"
               encoding="${javac.encoding}"/>

        <!-- copy resource files -->
        <copy todir="${classes.examples.dir}">
            <fileset dir="${src.examples.dir}">
                <patternset refid="resources" />
            </fileset>
        </copy>
    </target>

    <target name="compile.test"
            depends="init, compile"
            description="compile Aperture unit tests">
        <!-- compile unit tests -->
        <mkdir dir="${classes.test.dir}" />
        <javac source="${java.source.version}"
               target="${java.target.version}"
               srcdir="${src.test.dir}"
               destdir="${classes.test.dir}"
               classpathref="classpath.test"
               debug="${compile.debug}"
               debuglevel="${compile.debuglevel}"
               deprecation="${compile.deprecation}"
               optimize="${compile.optimize}" 
               encoding="${javac.encoding}"/>

        <!-- copy resource files -->
        <copy todir="${classes.test.dir}">
            <fileset dir="${src.test.dir}">
                <patternset refid="resources" />
            </fileset>
        </copy>
    </target>

    <target name="compile.activators"
            depends="init, compile"
            description="compile Aperture bundle activators">
        <!-- compule unit tests -->
        <mkdir dir="${classes.activators.dir}" />
        <javac source="${java.source.version}"
               target="${java.target.version}"
               srcdir="${src.activators.dir}"
               destdir="${classes.activators.dir}"
               classpathref="classpath.activators"
               debug="${compile.debug}"
               debuglevel="${compile.debuglevel}"
               deprecation="${compile.deprecation}"
               optimize="${compile.optimize}" 
               encoding="${javac.encoding}"/>
        <!-- copy resource files -->
        <copy todir="${classes.activators.dir}">
            <fileset dir="${src.activators.dir}">
                <patternset refid="resources" />
            </fileset>
        </copy>
    </target>

	<target name="compile.integration.test"
	            depends="init, compile"
	            description="compile Aperture OSGI integration tests">
	        <!-- compile integration tests -->
			<mkdir dir="${classes.integration.test.dir}" />
	        <javac source="${java.source.version}"
	               target="${java.target.version}"
	               srcdir="${src.integration.test.dir}"
	               destdir="${classes.integration.test.dir}"
	               classpathref="classpath.integration.test"
	               debug="${compile.debug}"
	               debuglevel="${compile.debuglevel}"
	               deprecation="${compile.deprecation}"
	               optimize="${compile.optimize}" 
	               encoding="${javac.encoding}"/>

	        <!-- copy resource files -->
	        <copy todir="${classes.integration.test.dir}">
	            <fileset dir="${src.integration.test.dir}">
	                <patternset refid="resources" />
	            </fileset>
	        </copy>
	    </target>
	
    <!-- ******************************************************************* -->
	<!-- ************** NORMAL - NON-OSGI JARS GENERATION ****************** -->
	<!-- ******************************************************************* -->
    
    <target name="jar"
            depends="compile"
            description="create a jar file with the Aperture core classes">
        <mkdir dir="${dist.plainjars.dir}" />
        <jar destfile="${dist.plainjars.dir}/${project.jar}" compress="no">
            <fileset dir="${classes.java.dir}" />
        </jar>
    </target>

    <target name="jar.examples"
            depends="compile.examples"
            description="create a jar file with the Aperture example classes">
        <mkdir dir="${dist.plainjars.dir}" />
        <jar destfile="${dist.plainjars.dir}/${project-examples.jar}" compress="no">
            <fileset dir="${classes.examples.dir}" />
        </jar>
    </target>

    <target name="jar.test"
            depends="compile.test"
            description="create a jar file with the Aperture unit test classes">
        <mkdir dir="${dist.plainjars.dir}" />
        <jar destfile="${dist.plainjars.dir}/${project-test.jar}" compress="no">
            <fileset dir="${classes.test.dir}" />
        </jar>
    </target>

    <!-- generates all three jars -->
    <target name="build"
                depends="jar, jar.examples, jar.test"
                description="incrementally builds all Aperture jar files" />
 
    <!-- generates all three jars and copies them to lib -->
    <target name="testbuild"
    		depends="build"
    		description="Builds plain jars and copies them to the lib folder">
    	<copy todir="${lib.dir}">
        	<fileset dir="${dist.plainjars.dir}">
        	    <include name="${project.jar}"/>
        	    <include name="${project-examples.jar}"/>
        	    <include name="${project-test.jar}" />
    	    </fileset>
        </copy>
    </target>

    <!-- ******************************************************************* -->
	<!-- *********************** SELECTORS INCLUSION  ********************** -->
	<!-- ******************************************************************* -->
	
	&selectors;
	
    <!-- ******************************************************************* -->
	<!-- ******************** OSGI BUNDLES GENERATION ********************** -->
	<!-- ******************************************************************* -->

    <target name="bundle.core.jar"
            depends="compile.activators"
            description="create the core aperture bundle">
        <mkdir dir="${dist.bundle.dir}" />
        <jar destfile="${dist.bundle.dir}/${bundle.core.jar}"
             compress="no" manifest="${core.manifest.mf}">
        	<manifest>
        		<attribute name="Bundle-Version" value="${project.version.osgi}"/>
        	</manifest>
            <fileset dir="${classes.java.dir}">
                <selector refid="bundle.core.selector" />
            </fileset>
            <!-- 29.06.2008 Antoni: I excluded the sources from the bundles -->
            <!--<fileset dir="${src.java.dir}">
                <and>
                    <selector refid="bundle.core.coarsegrained.selector" />
                    <selector refid="bundle.exclude.resources.selector" />
                </and>
            </fileset>-->
            <fileset dir="${classes.activators.dir}">
                <selector refid="bundle.core.selector" />
            </fileset>
            <fileset dir="${src.activators.dir}">
                <and>
                    <selector refid="bundle.core.selector" />
                    <selector refid="bundle.exclude.resources.selector" />
                </and>
            </fileset>
            <fileset dir="${basedir}">
                <selector refid="bundle.core.selector" />
            </fileset>
        </jar>
    </target>
	
	<target name="bundle.core.withsource.jar"
	            depends="compile.activators"
	            description="create the core aperture bundle">
	        <mkdir dir="${dist.bundle.dir}" />
	        <jar destfile="${dist.bundle.dir}/${bundle.core.jar}"
	             compress="no" manifest="${core.manifest.mf}">
	        	<manifest>
	        		<attribute name="Bundle-Version" value="${project.version.osgi}"/>
	        	</manifest>
	            <fileset dir="${classes.java.dir}">
	                <selector refid="bundle.core.coarsegrained.selector" />
	            </fileset>
	        	<!-- 27.1.2009 Leo: made a new target bundle with sources for debugging -->
	            <fileset dir="${src.java.dir}">
	                <and>
	                    <selector refid="bundle.core.coarsegrained.selector" />
	                    <selector refid="bundle.exclude.resources.selector" />
	                </and>
	            </fileset>
	            <fileset dir="${classes.activators.dir}">
	                <selector refid="bundle.core.coarsegrained.selector" />
	            </fileset>
	            <fileset dir="${src.activators.dir}">
	                <and>
	                    <selector refid="bundle.core.coarsegrained.selector" />
	                    <selector refid="bundle.exclude.resources.selector" />
	                </and>
	            </fileset>
	            <fileset dir="${basedir}">
	                <selector refid="bundle.core.coarsegrained.selector" />
	            </fileset>
	        </jar>
	    </target>

    <target name="bundle.impl.jar"
            depends="compile.activators"
            description="create the aperture implementation bundle">
        <mkdir dir="${dist.bundle.dir}" />
        <jar destfile="${dist.bundle.dir}/${bundle.impl.jar}"
             compress="no"
        	 manifest="${impl.manifest.mf}">
        	<manifest>
        		<attribute name="Bundle-Version" value="${project.version.osgi}"/>
        	</manifest>
            <fileset dir="${classes.java.dir}">
                <selector refid="bundle.impl.selector" />
            </fileset>
            <!-- 29.06.2008 Antoni: I excluded the sources from the bundles -->
            <!--<fileset dir="${src.java.dir}">
                <and>
                    <selector refid="bundle.impl.coarsegrained.selector" />
                    <selector refid="bundle.exclude.resources.selector" />
                </and>
            </fileset>-->
            <fileset dir="${classes.activators.dir}">
                <selector refid="bundle.impl.selector" />
            </fileset>
            <fileset dir="${src.activators.dir}">
                <and>
                    <selector refid="bundle.impl.selector" />
                    <selector refid="bundle.exclude.resources.selector" />
                </and>
            </fileset>
            <fileset dir="${basedir}">
                <selector refid="bundle.impl.selector" />
            </fileset>
        </jar>
    </target>
	
	<target name="bundle.safe.jar"
	        depends="compile.activators"
	        description="create the aperture smila-ready bundle">
	    <mkdir dir="${dist.bundle.dir}" />
	    <jar destfile="${dist.bundle.dir}/${bundle.safe.jar}"
	         compress="no"
	    	 manifest="${safe.manifest.mf}">
	    	<manifest>
	    		<attribute name="Bundle-Version" value="${project.version.osgi}"/>
	    	</manifest>
	        <fileset dir="${classes.java.dir}">
	            <selector refid="bundle.safe.selector" />
	        </fileset>
	        <fileset dir="${classes.activators.dir}">
	            <selector refid="bundle.safe.selector" />
	        </fileset>
	        <fileset dir="${src.activators.dir}">
	            <and>
	                <selector refid="bundle.safe.selector" />
	                <selector refid="bundle.exclude.resources.selector" />
	            </and>
	        </fileset>
	        <fileset dir="${basedir}">
	            <selector refid="bundle.safe.selector" />
	        </fileset>
	    </jar>
	</target>
	
    <target name="bundle.impl.withsource.jar"
            depends="compile.activators"
            description="create the aperture implementation bundle">
        <mkdir dir="${dist.bundle.dir}" />
        <jar destfile="${dist.bundle.dir}/${bundle.impl.jar}"
             compress="no"
        	 manifest="${impl.manifest.mf}">
        	<manifest>
        		<attribute name="Bundle-Version" value="${project.version.osgi}"/>
        	</manifest>
            <fileset dir="${classes.java.dir}">
                <selector refid="bundle.impl.coarsegrained.selector" />
            </fileset>
            <!-- 27.1.2009 Leo: made a new target bundle with sources for debugging -->
            <fileset dir="${src.java.dir}">
                <and>
                    <selector refid="bundle.impl.coarsegrained.selector" />
                    <selector refid="bundle.exclude.resources.selector" />
                </and>
            </fileset>
            <fileset dir="${classes.activators.dir}">
                <selector refid="bundle.impl.coarsegrained.selector" />
            </fileset>
            <fileset dir="${src.activators.dir}">
                <and>
                    <selector refid="bundle.impl.coarsegrained.selector" />
                    <selector refid="bundle.exclude.resources.selector" />
                </and>
            </fileset>
            <fileset dir="${basedir}">
                <selector refid="bundle.impl.coarsegrained.selector" />
            </fileset>
        </jar>
    </target>

    <target name="bundle.example.jar"
            depends="compile.examples"
            description="create the bundle with an example">
        <mkdir dir="${dist.bundle.dir}" />
        <jar destfile="${dist.bundle.dir}/${bundle.example.jar}"
             compress="no"
        	 manifest="${example.manifest.mf}">
        	<manifest>
        	    <attribute name="Bundle-Version" value="${project.version.osgi}"/>
        	</manifest>
            <fileset dir="${classes.examples.dir}">
                <filename name="org/semanticdesktop/aperture/examples/osgi/*" />
            </fileset>
        </jar>
    </target>

    <!-- generates all three bundles -->
    <target name="jar.bundles"
            depends="bundle.core.jar,bundle.impl.jar,bundle.example.jar, bundle.safe.jar"
            description="create aperture OSGi bundles" />
            
	<!-- make the two bundles for which we have source jars -->
    <target name="jar.withsource.bundles"
            depends="bundle.core.withsource.jar,bundle.impl.withsource.jar"
            description="create aperture OSGi bundles" />
 
    <!-- ******************************************************************* -->
	<!-- ***************** RELEASE GENERATION AND PACKAGING **************** -->
	<!-- ******************************************************************* -->
    
    <target name="javadoc"
            depends="init"
            description="create the javadoc for the core classes">
        <!-- create javadoc files -->
        <mkdir dir="${javadoc.dir}" />
        <javadoc destdir="${javadoc.dir}"
                 sourcepath="${src.java.dir}"
                 author="true"
                 version="true"
                 additionalparam="-breakiterator"
                 use="true"
                 classpathref="classpath"
                 source="${java.src.version}"
                 windowtitle="${project.longname} API release ${project.version.full}"
                 doctitle="${project.longname} API release ${project.version.full}"
                 packagenames="org.semanticdesktop.aperture.*"
                 excludepackagenames="org.semanticdesktop.aperture.opener.*">
            <link href="http://www.openrdf.org/doc/sesame2/api/" />
            <link href="http://jena.sourceforge.net/javadoc/" />
            <link href="http://java.sun.com/j2se/1.4.2/docs/api" />
        </javadoc>
    </target>

    <target name="dist"
            description="build the jar and javadoc files"
            depends="build, test, javadoc" />

    <target name="release"
            depends="dist"
            description="builds a directory tree containing a complete Aperture distro">
        <!-- copy README-like files -->
        <mkdir dir="${release.dir}" />
        <copy todir="${release.dir}">
            <fileset file="${basedir}/README" />
            <fileset file="${basedir}/LICENSE" />
            <fileset file="${basedir}/CHANGELOG" />
        </copy>

        <!-- copy Aperture jar files -->
        <mkdir dir="${release.lib.dir}" />
        <copy todir="${release.lib.dir}">
            <fileset dir="${dist.plainjars.dir}" />
        </copy>

        <!-- copy third party libs -->
        <copy todir="${release.lib.dir}">
            <fileset dir="${lib.dir}">
                <include name="*.jar" />
            </fileset>
        </copy>

        <!-- copy licenses of third party libs -->
        <mkdir dir="${release.lib.licenses.dir}" />
        <copy todir="${release.lib.licenses.dir}">
            <fileset dir="${lib.dir}">
                <include name="*.txt" />
            </fileset>
        </copy>
        
        <!-- copy patches applied to third-party libs -->
        <mkdir dir="${release.patches.dir}" />
        <copy todir="${release.patches.dir}">
            <fileset dir="${patches.dir}" />
        </copy>

        <!-- copy jacob.dll to the release's root dir -->
        <copy todir="${release.dir}" file="jacob.dll" />

        <!-- copy bin files -->
        <mkdir dir="${release.bin.dir}" />
        <copy todir="${release.bin.dir}">
            <fileset dir="${bin.dir}">
                <exclude name="Generate*.launch" />
                <!-- only used for generated source code -->
            </fileset>
        </copy>

        <!-- copy documentation files -->
        <!-- The documentation is out of date, since all relevant information
             has been moved to the wiki and is maintained there -->
        <!-- <mkdir dir="${release.doc.dir}" />
        <copy todir="${release.doc.dir}">
            <fileset dir="${doc.dir}">
                <include name="**" />
                <exclude name="aperture_overview.ppt" />
                
            </fileset>
        </copy>
		-->
        
        <mkdir dir="${release.doc.api.dir}" />
        <copy todir="${release.doc.api.dir}">
            <fileset dir="${javadoc.dir}" />
        </copy>

        <!-- create src.zip file -->
        <zip destfile="${release.src.zip}" basedir="${basedir}">
            <include name="src/**" />
            <include name="build.xml" />
            <include name="selectors.xml" />

            <!-- this seems to be default behaviour but it doesn't hurt to be explicit -->
            <exclude name="**/CVS, **/.svn/**" />

            <!-- The following files are exluded while their APIs are still under heavy revision.
			     Note that this exludes both core code and unit tests. -->
            <!-- This exclude has been removed by Antoni Mylka on 22.10.2007 -->
            <!-- Sourceforge Bug ID [ 1815159 ] -->
            <!-- <exclude name="**/org/semanticdesktop/aperture/opener/**" /> -->
        </zip>
    </target>

    <target name="prepareosgirelease"
            depends="release, jar.bundles"
            description="builds the normal release and adds the osgi bundles zip">

        <!-- copy README-like files -->
        <mkdir dir="${osgirelease.dir}" />
        <copy todir="${osgirelease.dir}">
            <fileset file="${basedir}/README" />
            <fileset file="${basedir}/LICENSE" />
            <fileset file="${basedir}/CHANGELOG" />
        </copy>

        <!-- copy Aperture jar files -->
        <mkdir dir="${osgirelease.lib.dir}" />
        <copy todir="${osgirelease.lib.dir}">
            <fileset dir="${dist.bundle.dir}" />
        </copy>

        <!-- copy osgi bundles necessary to have a full-blown osgi environment -->
        <copy todir="${osgirelease.lib.dir}">
            <fileset file="${lib.dir}/rdf2go.api-4.7.0.jar" />
            <fileset file="${lib.dir}/rdf2go.impl.sesame22-4.7.0.jar" />
            <fileset file="${lib.dir}/slf4j-api-1.5.0.jar" />
            <fileset file="${lib.dir}/slf4j-jdk14-1.5.0.jar" />
            <fileset file="${lib.dir}/jcl104-over-slf4j-1.5.0.jar" />
            <fileset file="${lib.dir}/openrdf-sesame-onejar-osgi-2.2.3.jar" />
        	<fileset file="${lib.dir}/com.drew.metadata_2.4.0.jar" />
        	<fileset file="${lib.dir}/org.apache.poi_3.2.0.jar" />
        	<fileset file="${lib.dir}/org.fontbox_0.2.0.jar" />
        	<fileset file="${lib.dir}/org.jempbox.xmp_0.2.0.jar" />
        	<fileset file="${lib.dir}/org.pdfbox_0.7.4.jar" />
        	<fileset file="${lib.dir}/com.sun.jai.codec_1.1.3.jar" />
        	<fileset file="${lib.dir}/com.sun.jai.core_1.1.3.jar" />
        	<fileset file="${lib.dir}/org.htmlparser_1.6.0.jar" />
        	<fileset file="${lib.dir}/org.bouncycastle.bcmail_1.32.0.jar" />
        	<fileset file="${lib.dir}/org.bouncycastle.bcprovider_1.32.0.jar" />
        	<fileset file="${lib.dir}/javax.activation_1.1.1.jar" />
        	<fileset file="${lib.dir}/javax.mail_1.4.1.jar" />
        	<fileset file="${lib.dir}/javax.xml_1.3.4.v200806030440.jar" />
        </copy>

        <!-- copy licenses of third party libs -->
        <mkdir dir="${osgirelease.lib.licenses.dir}" />
        <copy todir="${osgirelease.lib.licenses.dir}">
            <fileset dir="${lib.dir}">
                <include name="*.txt" />
            </fileset>
        </copy>
        
        <!-- copy patches applied to third-party libs -->
        <mkdir dir="${osgirelease.patches.dir}" />
        <copy todir="${osgirelease.patches.dir}">
            <fileset dir="${patches.dir}" />
        </copy>

        <!-- copy documentation files -->
        <!-- the documentation is being maintained on the wiki now and therefore has been
             excluded from the release .jar -->
        <!-- <mkdir dir="${osgirelease.doc.dir}" />
        <copy todir="${osgirelease.doc.dir}">
            <fileset dir="${doc.dir}">
                <include name="**" />
                <exclude name="aperture_overview.ppt" />
                
            </fileset>
        </copy> -->

        <mkdir dir="${osgirelease.doc.api.dir}" />
        <copy todir="${osgirelease.doc.api.dir}">
            <fileset dir="${javadoc.dir}" />
        </copy>
    	
    	<!-- create src.zip file -->
        <zip destfile="${osgirelease.src.zip}" basedir="${basedir}">
            <include name="src/**" />
            <include name="build.xml" />
            <include name="selectors.xml" />

            <!-- this seems to be default behaviour but it doesn't hurt to be explicit -->
            <exclude name="**/CVS, **/.svn/**" />
        </zip>
    </target>
	
	<target name="osgirelease"
		    depends="prepareosgirelease, test.integration"
			description="Does the integration-testing of the osgi release">
	</target>

    <target name="package"
            depends="osgirelease"
            description="create zipped release files, to be uploaded to sourceforge.net">
        <mkdir dir="${package.dir}" />

        <!-- put the contents of the release dir in a zip file, with the project name as path prefix -->
        <zip destfile="${package.zip}">
            <zipfileset dir="${release.dir}" prefix="${package.prefix}" />
        </zip>

        <!-- do basically the same to create a tar file -->
        <tar destfile="${package.tgz}" compression="gzip" longfile="gnu">
            <tarfileset dir="${release.dir}" prefix="${package.prefix}" />
        </tar>
        
        <!-- put the contents of the release dir in a zip file, with the project name as path prefix -->
        <zip destfile="${osgipackage.zip}">
            <zipfileset dir="${osgirelease.dir}" prefix="${package.prefix}" />
        </zip>

        <!-- do basically the same to create a tar file -->
        <tar destfile="${osgipackage.tgz}" compression="gzip" longfile="gnu">
            <tarfileset dir="${osgirelease.dir}" prefix="${package.prefix}" />
        </tar>
    </target>

    <!--
	  To get this to work in Eclipse, either put JUnit into your global ant dependencies or local ant dependencies. 
	  
      A - global dependencies:
          (see https://www.cyberarmy.net/forum/sneak/threads/41700.html)
          "If you'd rather use Eclipse's built-in Ant, you'll need to add junit.jar to its classpath.
          To do this, go to Window ? Preferences ? Ant ? Runtime. Then click the "Add JARs" button 
          and select junit.jar and xalan.jar from sneak/lib/. Click OK until you arrive back at the workbench view. 
      B - local dependencies (recommended):
          right-click the ant target "test" or do whatever you usually do to start ant,
          then select the "run as ...." option, so that you can configure ant before starting.
          This menu is also available on the "run external tools" button.
          There, switch to the "classpath" tab and add the /aperture/lib/junit.jar to the ant classpath. 
	-->
    <target name="test"
            depends="compile.test"
            description="test the Aperture core classes">
       <junit fork="yes"
               printsummary="withOutAndErr"
               failureproperty="unit.test.failed"
               showoutput="yes">
            <classpath refid="classpath.junit" />
       		<!-- uncomment to see what went wrong in the result.txt file -->
       		<!-- <formatter type="plain" /> -->
            <test name="org.semanticdesktop.aperture.TestAll"
                  outfile="result" />
            <jvmarg value="-Daperture.validation.skip=${aperture.validation.skip}"/>
        </junit>
        <fail if="unit.test.failed" message="Tests failed." />
    </target>
    
	<target name="test.integration"
	            depends="compile.integration.test"
	            description="test the Aperture core classes">
       <junit fork="yes"
               printsummary="withOutAndErr"
               failureproperty="unit.test.failed"
               showoutput="yes">
            <classpath refid="classpath.integration.test" />
       	    <!-- uncomment to see what went wrong in the result-integration.txt file -->
       		<!-- <formatter type="plain" /> -->
            <test name="org.semanticdesktop.aperture.integration.IntegrationTestAll"
                  outfile="result-integration" />
            <jvmarg value="-Daperture.validation.skip=${aperture.validation.skip}"/>
        </junit>
        <fail if="unit.test.failed" message="Tests failed." />
    </target>
	
</project>